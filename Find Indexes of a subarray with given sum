// This is solution in O(n^2).
// Note- This has issue of time limite exceeded. We will optimise the approach.
/*
N = 5, S = 12
A[] = {1,2,3,7,5}
Output: 2 4
Explanation: The sum of elements 
from 2nd position to 4th position 
is 12.
*/

class Solution
{
    //Function to find a continuous sub-array which adds up to a given number.
    static ArrayList<Integer> subarraySum(int[] arr, int n, int s) 
    {
        // Your code here
        int sum;
        ArrayList<Integer> ans = new ArrayList<>();
        for(int i=0; i<n; i++){
            sum=0;
            for(int j=i; j<n; j++){
                sum+=arr[j];
                if(sum==s){
                    ans.add(i+1);
                    ans.add(j+1);
                    return ans;
                }else if (sum>s){
                    break;
                }
            }
        }
        ans.add(-1);
        return ans;
    }
}

---------------------
Optimized approach--
// We are using sliding window technique here. 
/*
Create two variables, start=0, sum=0
Traverse the array.
Update the variable sum by adding current element, sum = sum + arr[i]
If the sum is greater than the given sum, update the variable sum as sum = sum â€“ arr[start],
and update start as, start++.
If the sum is equal to given sum, print the subarray and break the loop

*/ 
static ArrayList<Integer> subarraySum(int[] arr, int n, int s) {
        int sum = 0, start = 0;
        ArrayList<Integer> ans = new ArrayList<>();
        
        for (int i = 0; i < n; i++) {
            sum += arr[i];
            if(sum>=s){
            while (sum > s && start <i) {
                sum -= arr[start];
                start++;
            }
            }
            
            if (sum == s) {
                ans.add(start + 1); // Add start index of subarray (+1 for 1-based indexing)
                ans.add(i + 1); // Add end index of subarray (+1 for 1-based indexing)
                return ans;
            }
        }
        ans.add(-1); // If no subarray found, return -1
        return ans;
