// Implemented using binary serach
Tip-- When you see search of element with constrain of O(logn) or sorted array then binary search is good to go.
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] result= new int[2];
        result[0]=startIdx(nums,target);
        result[1]=endIdx(nums,target);
        return result;
    }

    public int startIdx(int nums[], int target){
        int index=-1;
        int start=0, end=nums.length-1;
        while(start<=end){
            int mid=start + (end-start)/2;
            if(nums[mid]>=target){
                end=mid-1;
            }
            else{
                start=mid+1;
            }
            if(nums[mid]==target) index=mid;
        }
        return index;
    }
    public int endIdx(int nums[], int target){
        int index=-1;
        int start=0, end=nums.length-1;
        while(start<=end){
            int mid=start + (end-start)/2;
            if(nums[mid]<=target){
                start=mid+1;
            }
            else{
                end=mid-1;
            }
            if(nums[mid]==target) index=mid;
        }
        return index;
    }
}
