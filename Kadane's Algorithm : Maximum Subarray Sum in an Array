Example --  arr = { -2, 1, -3, 4, -1, 2, 1, -5, 4};
O/P - 6
My approach ---
Complexity - O(n^2)
1. First, we will run a loop(say i) that will select every possible starting index of the subarray. The possible starting indices can vary from index 0 to index n-1(n = array size).
2. Inside the loop, we will run another loop(say j) that will signify the ending index as well as the current element of the subarray. For every subarray starting from index i, the possible ending index can vary from index i to n-1(n = size of the array).
3. Inside loop j, we will add the current element to the sum of the previous subarray i.e. sum = sum + arr[j]. Among all the sums the maximum one will be the answer.

class MaxSubArray{
	public static void main(String[] args){
		int arr[]={-2,1,-3,4,-1,2,1,-5,4};
		int max=arr[0];
		for(int i=0; i<arr.length; i++){
			int sum=0;
			for(int j=i; j<arr.length; j++){
				sum+=arr[j];
				if(sum>max) max=sum;
			}
		}
		System.out.println(max);
	}
}


Kadane Algorithm--
Complexity - O(n)
1. We will run a loop(say i) to iterate the given array.
2. Now, while iterating we will add the elements to the sum variable and consider the maximum one.
3. If at any point the sum becomes negative we will set the sum to 0 as we are not going to consider it as a part of our answer.

class kadane{
	public static void main(String[] args){
		int max=Integer.MIN_VALUE;
		int sum=0;
		int arr[]={-2,1,-3,4,-1,2,1,-5,4};
		for(int i=0; i<arr.length; i++){
			sum+=arr[i];
			if(sum>max) max=sum;
			if(sum<0) sum=0;
		}
		System.out.println(max);
	}
}
